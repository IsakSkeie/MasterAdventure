#%%
import asyncio
import requests
import aiohttp
import asyncio
import numpy as np
from matplotlib import pyplot as plt



theta_t = 22
Tenv = 22.5
global Tout
Tout = 18
Kh = 3.5
iError = 0

async def perform_post_request(url, data):
    headers = {
        'Content-Type': 'application/json',  # Set the content type to JSON
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data, headers=headers) as response:
            return await response.text()
        
        
        




async def dot_HeaterSim(u):
    global Tout
    x = (1/theta_t) * (-Tout + (Kh*u + Tenv))

    return x


async def FE(dot_x, x_prev, dt):
    x = x_prev + dt * dot_x
    return x


async def PI(ki, kp, sp, pv, dt):
    global iError
    error = sp - pv
    
    iError = iError + ki * error
    cv = iError + error * kp
    print(f"Control Value {cv}")
    return cv


async def simulation():
    global Tout
    data = []
    x = Tout
    dt = 0.1
    tspan = 200
    n = 0

    kp = 2
    ki = 0.1
    sp = 30
    oldSP = 0
    

    
    while n < tspan:
        await asyncio.sleep(dt)  # Asynchronous sleep
        cv = await PI(ki, kp, sp, x, dt)
        
        
        xdot = await dot_HeaterSim(cv)
        x = await FE(xdot, x, dt)
        Tout = x
        data.append(x)
        n = n + 1
        
        
        # Example POST request
        API_data = {'value': x}
        print(f"Temperature: {x}")
        if n % 50 == 0:  # Print data every 2 seconds (4 * dt)
            # URL of the Flask server
            url = "http://localhost:5000/api/temperature"
            response = await perform_post_request(url, API_data)
            print(response)


        if sp != oldSP:
            API_data = {'value': sp}
            # URL of the Flask server
            url = "http://localhost:5000/api/setpoint"
            response = await perform_post_request(url, API_data)
            oldSP = sp
            print(response)
    
    
   
    sp_data = np.ones(len(data))*sp
    
    
    plt.plot(data)
    plt.plot(sp_data)
    
    plt.grid()
    plt.show()


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(simulation())
