import serial
import time
import struct
import RPi.GPIO as GPIO # Import Raspberry Pi GPIO library
from time import sleep # Import the sleep function from the time module
import os
import glob
from gpiozero import PWMLED
from gpiozero import Button
import asyncio
import psycopg2


    
pinButton = 20
tempLimit = 24

led = PWMLED(14)
button = Button(pinButton) 
    
frequency = 1000

GPIO.setup(12, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) # Set pin 10 to be an input pin and set initial value to be pulled low (off)

serial1 = serial.Serial('/dev/ttyUSB0', baudrate=115200,)

alarm_active = 0
alarm_ack = 0
Temp = 0
    
# Database connection parameters
db_params = {
"host": "localhost",
"database": "IoT_Data",
"user": "isak",
"password": "Halvorsen",
}


async def DB_Query(query_string):
    try:
        # Establish a connection to the PostgreSQL database
        connection = psycopg2.connect(**db_params)

        # Create a cursor object
        cursor = connection.cursor()

        # SQL query
        sql_query = 	"""SELECT * FROM public."TermperatureReadings" """

        # Execute the query
        cursor.execute(sql_query)

        # Fetch the results (assuming you're expecting multiple rows)
        rows = cursor.fetchall()

        # Process and print the results
        for row in rows:
            print(row)

        # Close the cursor and connection
        cursor.close()
        connection.close()

    except psycopg2.Error as error:
        print("Error connecting to the PostgreSQL database:", error)

    
    
async def DB_Query(queryString):
    while True:
        try:
            # Establish a connection to the PostgreSQL database
            connection = psycopg2.connect(**db_params)

            # Create a cursor object
            cursor = connection.cursor()

            # SQL query
            sql_query = 	"""SELECT * FROM public."TermperatureReadings" """

            # Execute the query
            cursor.execute(sql_query)
            print(queryString)
            # Fetch the results (assuming you're expecting multiple rows)
            rows = cursor.fetchall()

            # Process and print the results
            for row in rows:
                print(row)

            # Close the cursor and connection
            cursor.close()
            connection.close()

        except psycopg2.Error as error:
            print("Error connecting to the PostgreSQL database:", error)

        await asyncio.sleep(10)
    
async def QueryInsert(temp):
    return f""" INSERT INTO public."TermperatureReadings"("TimeStamp", "SensorId", "PV") VALUES (Current_Date,1, {temp}); """
    
async def main():
    alarm_ack1 = 0
    Temp = 0
    periodic_task = asyncio.create_task(DB_Query(QueryInsert(Temp)))
    
    while True:
        
        
        result = serial1.read(5)
        temp_mem = result.decode()
        Temp = float(temp_mem)
        print(Temp)
        #time.sleep(0.5)
    
    
        if button.is_pressed:
            print("Button was pushed!")
            alarm_ack1 = 0
    
    
        if Temp > tempLimit:
        
            alarm_active = 1
            alarm_ack1 = 1
            led.value = 1
            print("Temperature Alarm!")
            
        elif Temp < tempLimit and alarm_ack1:
            alarm_active = 0
            led.value = 0.05
        elif Temp < tempLimit and not alarm_ack1:
            led.value = 0
        await asyncio.sleep(5)    
            
if __name__ == "__main__":
    
    asyncio.run(main())